<?php
/**
 * Created by PhpStorm.
 * User: samson
 * Date: 5/10/2018
 * Time: 9:41 PM
 */

namespace App\Repositories\Admins;

use App\Models\Admin;
use App\Models\Merchant;
use App\Models\Seller;
use App\Models\SellerGroup;
use App\Repositories\BaseRepository;
use App\Repositories\DefaultRepository;
use Illuminate\Container\Container as Application;

class SellerRepository extends BaseRepository
{

    use DefaultRepository;

    protected $routeIndex;
    protected $routeEdit;
    protected $routeCreate;
    protected $routeDestroy;

    public function __construct(Application $app)
    {
        parent::__construct($app);
        $this->routeIndex = 'admin.sellers.index';
        $this->routeCreate = 'admin.sellers.create';
        $this->routeEdit = 'admin.sellers.edit';
        $this->routeDestroy = 'admin.sellers.destroy';
    }

    /**
     * Specify Model class name
     *
     * @return string
     */
    function model()
    {
        return Seller::class;
    }

    public function create(array $attributes)
    {
        $attributes[Seller::COLUMN_CREATED_BY] = auth()->user()[Admin::COLUMN_ID];

        $seller = parent::create($attributes); // TODO: Change the autogenerated stub

        if (empty($seller)){
            return false;
        } else{
            return $this->createDefaultAccount($attributes, $seller)?$seller:false;
        }
    }

    /**
     * @param $id
     * @return bool
     */
    public function deleteSeller($id){
        $seller = $this->findWithoutFail($id);

        if (empty($seller)){
            return false;
        }
        $seller->delete();
        return true;
    }

    /**
     * @return array
     */
    public function getSellerGroupsArray(){
        $groups = SellerGroup::select([SellerGroup::COLUMN_ID,SellerGroup::COLUMN_GROUP_NAME])->get();
        $array = array(__('admin_page_sellers.field_input_select_group_type'));
        foreach ($groups as $group){
            $array[$group[SellerGroup::COLUMN_ID]] = $group[SellerGroup::COLUMN_GROUP_NAME];
        }

        return $array;
    }

    /**
     * @param array $attributes
     * @param $seller
     * @return bool
     */
    public function createDefaultAccount(array $attributes, $seller): bool
    {
        $attributes[Merchant::COLUMN_SELLER_ID] = $seller[Seller::COLUMN_ID];
        $merchant = Merchant::createSeller($attributes);
        if ($merchant instanceof Merchant) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param $table
     * @return mixed
     */
    public function setCustomTable($table){

        $table->addQueryInstructions(function ($query) {
            $query->select($this->entityColumns)
                ->join(SellerGroup::TABLE,SellerGroup::ID,'=',Seller::SELLER_GROUP_ID)
                ->where($this->conditions);
        });

        return $table;
    }
}